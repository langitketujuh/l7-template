#!/usr/bin/env bash

TITLE="LangitKetujuh Export"
NAME=$(basename "$0")
INSTALLDIR=$(which basename)
INKSCAPEDIR=$(which inkscape)
VERSION="1.13"
WEB="https://langitketujuh.id"
LICENSE="GPL-2.0-only"
TMP="/tmp"
SRGB="/usr/share/color/icc/colord/sRGB.icc"
CHEMICAL_PROOF="/usr/share/color/icc/krita/cmyk.icm"
SWOP2006_COATED3V2="/usr/share/color/icc/idealliance/SWOP2006_Coated3v2.icc"
JAPANCOLOR2001COATED="/usr/share/color/icc/adobe/JapanColor2001Coated.icc"
USWEBCOATEDSWOP="/usr/share/color/icc/adobe/USWebCoatedSWOP.icc"

usage() {
 echo -e "\n\033[1;36m $TITLE $VERSION\033[0m"
 echo -e "\e[3m Yet Another CLI Exporter\e[0m"
 echo -e "\e[3m Fork from inkporter-cli\e[0m"
 echo
    cat <<- EOF
 Website  : $WEB
 License  : $LICENSE

 Usage    : $NAME [file.svg] [id]

 Option   : -i,--install        # install depedency color profile
            -h,--help           # show this help
            -v,--version        # show $NAME version

 Feature  : * File output: PNG, JPG, TIF, PDF, SVG, EPS, AI, PSD, & WEBP.
            * Deep per inch (DPI).
            * Depth 16-bit.
            * Colorspace RGB/CMYK.
            * Embed color profile CMYK for jpg, tif, psd, and pdf raster.
                RGB   : Default - srgb
                CMYK  : Krita   - chemical proof
                CMYK  : Generic - swop2006 coated3v2
                CMYK  : Corel   - japan color 2001 coated
                CMYK  : Adobe   - u.s. web coated (swop) v2
            * Merge PDF

EOF
}

check_root(){
  if [ $(id -u) -ne 0 ]; then
  echo -e "\033[1;91m[FAILED]\033[0m Please run as root!"
  exit
  fi
}

for arg in "$@"; do
    case $arg in
        --install|-i)
            check_root
            if xbps-install --version >/dev/null 2>&1;
              then
              echo -e "\033[1;36m[1]\033[0m Install depedencies > XBPS distro"
              mkdir -pv $TMP
              xbps-install -Sy xbps;
              xbps-install sudo curl wget base-files colord unzip which \
              inkscape ghostscript ImageMagick libwebp-tools zip
              elif dnf --version >/dev/null 2>&1;
                then
                echo -e "\033[1;36m[1]\033[0m Install depedencies > RPM distro"
                mkdir -pv $TMP
                yum install sudo curl wget fedora-release colord unzip which \
                inkscape ghostscript ImageMagick libwebp-tools zip
              elif pacman --version >/dev/null 2>&1;
                then
                echo -e "\033[1;36m[1]\033[0m Install depedencies > Pacman distro"
                mkdir -pv $TMP
                pacman -Syy;
                pacman -S sudo curl wget lsb-release colord unzip which \
                inkscape ghostscript imagemagick libwebp \
                poppler poppler-glib poppler-qt5 zip
              elif apt --version >/dev/null 2>&1;
                then
                echo -e "\033[1;36m[1]\033[0m Install depedencies > APT distro"
                mkdir -pv $TMP
                apt -y update;
                apt install sudo curl wget lsb-release colord unzip \
                inkscape ghostscript imagemagick webp zip
              elif zypper --version >/dev/null 2>&1;
                then
                echo -e "\033[1;36m[1]\033[0m Install depedencies > Zypper distro"
                mkdir -pv $TMP
                zypper install sudo curl wget lsb-release colord unzip which \
                inkscape ghostscript ImageMagick libwebp-tools zip
              else
                echo -e "\033[1;36m[1]\033[0m Install depedencies > What your os?"
              fi
              echo -e "\033[1;36m[2]\033[0m Adobe icc"
              echo -e "[*] Checking"
              if find /usr/share/color/icc/adobe/ -name "*.icc" -type f >/dev/null 2>&1; then
                echo -e "[*] Adobe icc installed"
                else
                echo -e "[*] Preparing new dir $TMP"
                mkdir $TMP/adobe-icc >/dev/null 2>&1
                cd $TMP/adobe-icc
                echo -e "[*] Download Adobe icc Profiles"
                wget -c https://download.adobe.com/pub/adobe/iccprofiles/mac/AdobeICCProfilesCS4Mac_end-user.zip >/dev/null 2>&1
                echo -e "[*] Unzip"
                unzip -o -q AdobeICCProfilesCS4Mac_end-user.zip >/dev/null 2>&1
                echo -e "[*] Installing"
                install -D -m644 -t /usr/share/color/icc/adobe/ */RGB/*.icc
                install -D -m644 -t /usr/share/color/icc/adobe/ */CMYK/*.icc
                install -D -m644 -t /usr/share/doc/adobe */*.pdf
                if find /usr/share/color/icc/adobe/ -name "*.icc" -type f >/dev/null 2>&1; then
                  echo -e "" >/dev/null 2>&1
                  else
                  echo -e "[-] Adobe icc is not already installed!"
                  exit;
                fi
              fi
              echo -e "\033[1;36m[3]\033[0m Krita cmyk icm"
              echo -e "[*] Checking"
              if find /usr/share/color/icc/krita/ -name "*.icm" -type f >/dev/null 2>&1; then
                echo -e "[*] Krita cmyk icm installed"
                else
                echo -e "[*] Preparing new dir $TMP"
                mkdir $TMP/krita-icc >/dev/null 2>&1
                cd $TMP/krita-icc
                echo -e "[*] Download Krita cmyk icm Profiles"
                wget -c https://github.com/KDE/krita/raw/master/krita/data/profiles/cmyk.icm >/dev/null 2>&1
                echo -e "[*] Installing"
                install -D -m644 -t /usr/share/color/icc/krita *.icm
                if find /usr/share/color/icc/krita/ -name "*.icm" -type f >/dev/null 2>&1; then
                  echo -e "" >/dev/null 2>&1
                  else
                  echo -e "[-] Krita cmyk icm is not already installed!"
                  exit;
                fi
              fi
              echo -e "\033[1;36m[4]\033[0m IDEAlliance icc"
              echo -e "[*] Checking"
              if find /usr/share/color/icc/idealliance/ -name "*.icc" -type f >/dev/null 2>&1; then
                echo -e "[*] IDEAlliance icc installed"
                else
                echo -e "[*] Preparing new dir $TMP"
                mkdir $TMP/idea-icc >/dev/null 2>&1
                cd $TMP/idea-icc
                echo -e "[*] Download SWOP2006_Coated3v2 icc Profiles"
                wget -c http://www.color.org/registry/profiles/SWOP2006_Coated3v2.icc >/dev/null 2>&1
                echo -e "[*] Installing"
                install -D -m644 -t /usr/share/color/icc/idealliance *.icc
                if find /usr/share/color/icc/idealliance/ -name "*.icc" -type f >/dev/null 2>&1; then
                  echo -e "" >/dev/null 2>&1
                  else
                  echo -e "[-] IDEAlliance icc is not already installed!"
                  exit;
                fi
              fi
              echo -e "\033[1;36m[FINISH]\033[0m Installation was successful!"
            exit 0
            ;;
        --deps|-d)
            echo -e "\033[1;33minkscape version: \033[0m"
            if inkscape --version | grep "Inkscape 1.*" ;then
                echo >/dev/null 2>&1; else
                echo
                echo "$NAME version: v$VERSION"
                echo "only for inkscape 1.x!";
            fi
            echo
            echo -e "\033[1;33mConvert ImageMagick version: \033[0m"
            convert -version | grep Version:
            echo
            echo -e "\033[1;33mghostscript version: \033[0m"
            gs --version
            echo
            echo -e "\033[1;33mwebp version: \033[0m"
            cwebp -version
            echo
            exit 0
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        --version|-v)
            echo -e "\033[1;33m $NAME\033[0m version $VERSION"
            exit 0
    esac
done

SOURCE=$1
IDPATTERN=$2

search_file() {
  find . -name "$SOURCE" -type f | wc -c
}

check_file() {
  # check empty file
  if [ -z $SOURCE ]; then
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m The SVG file is empty."
    exit;
    # check file not found
    elif [ $(search_file) -eq 0 ]; then
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m File $SOURCE not found."
    exit;
    else
    echo -e "" >/dev/null 2>&1;
  fi
}

id() {
  inkscape -S "$SOURCE" | grep "$IDPATTERN" | cut -d "," -f 1
}

check_id() {
  # check empty id
  if [ -z $IDPATTERN ]; then
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m The ID object is empty."
    exit;
    # check wrong id
    elif [ -z "$(id)" ]; then
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m Similar ID object \033[0;36m$IDPATTERN\033[0m was not found."
    exit;
    else
    echo >/dev/null 2>&1;
  fi
}

check_depedencies() {
  if inkscape --version >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m inkscape is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if find . -name "$CHEMICAL_PROOF" -type f >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m Krita cmyk icm is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if convert -version >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m ImageMagick is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if gs --version >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m ghostscript is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if cwebp -version >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m webp, libwebp or libwebp-tools is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if find /usr/share/color/icc/adobe/ -name "*.icc" -type f >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m Adobe icc is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if find /usr/share/color/icc/krita/ -name "*.icm" -type f >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m Krita cmyk icm is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if find /usr/share/color/icc/idealliance/ -name "*.icc" -type f >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m Idealliance icc is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
}

# check first
check_file
check_id
check_depedencies

check_stroke_to_path() {
cat "$SOURCE" | sed 's/;/ /g' | grep -oE 'stroke:#[^ ]*' | sed 's/stroke://g' | sed 's/#000000//g' | sort -u | xargs | tr -d '\n'
}

check_fill_opacity() {
cat "$SOURCE" | sed 's/;/ /g' | grep fill-opacity:0. | grep -oE 'fill:#[^ ]*' | sed 's/fill://g' | sed 's/#000000//g' | sort -u | xargs | tr -d '\n'
}

check_filter() {
cat "$SOURCE" | sed 's/;/ /g' | grep -oE 'filter:url\(#filter[^ ]*' | sed 's/filter:url//g' | tr -d '(#)"' | sort -u | xargs | tr -d '\n'
}

check_linear_gradient() {
cat "$SOURCE" | sed 's/;/ /g' | grep -oE 'fill:url\(#linearGradient[^ ]*' | sed 's/fill:url//g' | tr -d '(#)"' | sort -u | xargs | tr -d '\n'
}

check_radial_gradient() {
cat "$SOURCE" | sed 's/;/ /g' | grep -oE 'fill:url\(#radialGradient[^ ]*' | sed 's/fill:url//g' | tr -d '(#)"' | sort -u | xargs | tr -d '\n'
}

check_mesh() {
cat "$SOURCE" | sed 's/;/ /g' | grep -oE 'fill:url\(#meshgradient[^ ]*' | sed 's/fill:url//g' | tr -d '(#)"' | sort -u | xargs | tr -d '\n'
}

CIRCLE=$(cat "$SOURCE" | grep '<circle' | tr -d '<' | xargs -n1 | sort -u | xargs)
RECTANGLE=$(cat "$SOURCE" | grep '<rect' | tr -d '<' | xargs -n1 | sort -u | xargs)
TEXT=$(cat "$SOURCE" | grep '<text' | tr -d '<' | xargs -n1 | sort -u | xargs)
PATTERN=$(cat "$SOURCE" | grep '<pattern' | tr -d '<' | xargs -n1 | sort -u | xargs)
IMAGE=$(cat "$SOURCE" | grep -oE '<image' | tr -d '<' | xargs -n1 | sort -u | xargs)
STAR=$(cat "$SOURCE" | grep -oE 'star' | xargs -n1 | sort -u | xargs)
SPIRAL=$(cat "$SOURCE" | grep -oE 'spiral' | xargs -n1 | sort -u | xargs)
BOX3DSIDE=$(cat "$SOURCE" | grep -oE 'box3dside' | xargs -n1 | sort -u | xargs)

check_misc() {
  echo $CIRCLE $RECTANGLE $TEXT $PATTERN $IMAGE $STAR $SPIRAL $BOX3DSIDE | sort -u | xargs
}

eps_validator() {
  echo -e "Validator Eps8:"
  if [ $(echo -n $(check_stroke_to_path) | wc -c) -eq 0 ]; then
    echo -e "  Stroke to Path \t\033[1;36mSafe\033[0m"
    else
    echo -e "  Stroke to Path \t\033[1;33m$(check_stroke_to_path)\033[0m"
  fi
  if [ $(echo -n $(check_fill_opacity) | wc -c) -eq 0 ]; then
    echo -e "  Fill Opacity \t\t\033[1;36mSafe\033[0m"
    else
    echo -e "  Fill Opacity \t\t\033[1;33m$(check_fill_opacity)\033[0m"
  fi
  if [ $(echo -n $(check_filter) | wc -c) -eq 0 ]; then
    echo -e "  Remove Filter \t\033[1;36mSafe\033[0m"
    else
    echo -e "  Remove Filter \t\033[1;33m$(check_filter)\033[0m"
  fi
  if [ $(echo -n $(check_linear_gradient) | wc -c) -eq 0 ]; then
    echo -e "  Linear Gradient \t\033[1;36mSafe\033[0m"
    else
    echo -e "  Linear Gradient \t\033[1;33m$(check_linear_gradient) \033[0m"
  fi
  if [ $(echo -n $(check_radial_gradient) | wc -c) -eq 0 ]; then
    echo -e "  Radial Gradient \t\033[1;36mSafe\033[0m"
    else
    echo -e "  Radial Gradient \t\033[1;33m$(check_radial_gradient) \033[0m"
  fi
  if [ $(echo -n $(check_mesh) | wc -c) -eq 0 ]; then
    echo -e "  Mesh Gradient \t\033[1;36mSafe\033[0m"
    else
    echo -e "  Mesh Gradient \t\033[1;33m$(check_mesh) \033[0m"
  fi
  if [ $(echo -n $(check_misc) | wc -c) -eq 0 ]; then
    echo -e "  Object to Path \t\033[1;36mSafe\033[0m"
    else
    echo -e "  Object to Path \t\033[1;33m$(check_misc)\033[0m"
  fi
  if [ $(echo -n $(check_stroke_to_path) $(check_fill_opacity) $(check_filter) $(check_linear_gradient) $(check_radial_gradient) $(check_mesh) $(check_misc) | wc -c) -eq 0 ]; then
    echo -e ""
    echo -e "\033[1;36m[VALID]\033[0m File $SOURCE supports Eps8"
    else
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m File $SOURCE export to Eps8 might be raster"
    exit;
  fi
}

to_png() {
  for ID_LIST in $(id)
  do
    inkscape \
      --export-id="$ID_LIST" \
      --batch-process \
      --export-id-only \
      --export-type=png \
      --export-dpi=$DPI \
      --export-filename="$DIRECTORY/.temp/$ID_LIST.png" \
      $SOURCE >/dev/null 2>&1
      sleep 1
  done
}

to_svg() {
  for ID_LIST in $(id)
  do
    inkscape \
      --export-id="$ID_LIST" \
      --batch-process \
      --export-id-only \
      --export-type=svg \
      --export-plain-svg \
      --export-filename="$DIRECTORY/.temp/$ID_LIST.svg" \
      $SOURCE >/dev/null 2>&1
      sleep 1
  done
}

to_eps() {
  for ID_LIST in $(id)
  do
    inkscape \
      --export-id="$ID_LIST" \
      --batch-process \
      --export-id-only \
      --export-type=eps \
      --export-text-to-path \
      --export-ignore-filters \
      --export-filename="$DIRECTORY/.temp/$ID_LIST.eps" \
      $SOURCE >/dev/null 2>&1
      sleep 1
  done
}

# For pdf, ai and psd
to_pdf() {
  for ID_LIST in $(id)
  do
    inkscape \
      --export-id="$ID_LIST" \
      --batch-process \
      --export-id-only \
      --export-type=pdf \
      --export-text-to-path \
      --export-ignore-filters \
      --export-filename="$DIRECTORY/.temp/$ID_LIST.pdf" \
      $SOURCE >/dev/null 2>&1
      sleep 1
  done
}

finish() {
  echo -e ""
  echo -e "\033[1;36m[FINISH]\033[0m Job done."
}

PS3='Number: '
options=("Market" "Png" "Jpg" "Tif" "Pdf" "Svg" "Eps" "Ai" "Psd" "Webp" "Cancel")
clear
echo -e "\033[1;36m$TITLE v$VERSION \033[0m"
echo -e "\e[3mYet Another CLI Exporter\e[0m"
echo

select opt in "${options[@]}"
do
  case $opt in
    "Market")
      echo -e "Export to: \033[1;36mMARKETPLACE \033[0m"
      echo -e ""
      eps_validator
      echo -e ""
      echo -e "Marketplace \t\tOutput \t\tAdvice (px) \tPreview (dpi)"
      echo -e "  \033[1;33m[1] Pngtree\033[0m \t\t(eps+png).zip \t1200x1200 \t96"
      echo -e "  \033[1;33m[2] Freepik\033[0m \t\t(eps+jpg).zip \t1200x1200 \t300"
      echo -e "  \033[1;33m[3] Adobestock\033[0m \t(eps+jpg).zip \t500x500 \t600"
      echo -e "  \033[1;33m[4] Vectorstock\033[0m \t(eps).zip + jpg 380x400 \t300"
      echo -e "  \033[1;33m[5] Vecteezy\033[0m \t\teps + jpg \t4000x4000 \t96"
      echo -e "  \033[1;33m[6] Shutterstock\033[0m \teps \t\t4000x4000 \t-"
      echo -e "  \033[1;33m[7] Flaticon\033[0m \t\tsvg \t\t64x64 \t\t-"
      read -e -p "Number: " MARKET
      if [ -z $MARKET ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Marketplace is empty."
        exit
        elif [ $MARKET -eq 1 ]; then
        MARKETNAME="Pngtree"
        elif [ $MARKET -eq 2 ]; then
        MARKETNAME="Freepik"
        elif [ $MARKET -eq 3 ]; then
        MARKETNAME="Adobestock"
        elif [ $MARKET -eq 4 ]; then
        MARKETNAME="Vectorstock"
        elif [ $MARKET -eq 5 ]; then
        MARKETNAME="Vecteezy"
        elif [ $MARKET -eq 6 ]; then
        MARKETNAME="Shutterstock"
        elif [ $MARKET -eq 7 ]; then
        MARKETNAME="Flaticon"
        else
        echo -e "\033[1;91m[FAILED]\033[0m Marketplace not support."
        exit
      fi
      # shutterstock and flaticon no need dpi
      if [ $MARKET -ge 6 ]; then
        echo -e ""  >/dev/null 2>&1
        # marketplace 1-5 need dpi
        elif  [ $MARKET -le 5 ]; then
          echo -e "Preview DPI:"
          echo -e "  \033[1;33m[1] 96\033[0m \t\t(pngtree, vecteezy)"
          echo -e "  \033[1;33m[2] 300\033[0m \t\t(freepik, vectorstock)"
          echo -e "  \033[1;33m[3] 600\033[0m \t\t(adobestock)"
          read -e -p "Number: " DPI_NUM
          if [ -z $DPI_NUM ]; then
            echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
            exit
            elif [ $DPI_NUM -eq 1 ]; then
            DPI="96"
            elif [ $DPI_NUM -eq 2 ]; then
            DPI="300"
            elif [ $DPI_NUM -eq 3 ]; then
            DPI="600"
            else
            echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
            exit
          fi
      fi
      read -e -p "Folder Output: " -i "$MARKETNAME" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      #convert to png and pdf default (pngtree)
      for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
      do
        # for market < 5 with export image preview
        if [ $MARKET -le 5 ]; then
        mkdir -p "$DIRECTORY/.temp/$id"
          inkscape \
          --export-id=$id \
          --batch-process \
          --export-id-only \
          --export-type=png \
          --export-text-to-path \
          --export-ignore-filters \
          --export-dpi=$DPI \
          --export-filename="$DIRECTORY/.temp/$id/$id.png" \
          $SOURCE >/dev/null 2>&1
          inkscape \
          --export-id=$id \
          --batch-process \
          --export-id-only \
          --export-type=eps \
          --export-text-to-path \
          --export-ignore-filters \
          --export-filename="$DIRECTORY/.temp/$id/$id.eps" \
          $SOURCE >/dev/null 2>&1
        sleep 1
        # for shuttestock
          elif [ $MARKET -eq 6 ]; then
            to_eps
        # for flaticon
          elif [ $MARKET -eq 7 ]; then
            to_svg
          else
          exit
        fi
      done
      # export image preview
      # if eps+jpg (freepik)
      if [ $MARKET -eq 2 ]; then
        for i in $(find -name "*.png" | sed 's/\.\///');
          do convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace sRGB \
            "${i%.*}.jpg";
        done
        # if eps+jpg (adobe stock)
        elif [ $MARKET -eq 3 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///');
            do convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        # if eps.zip and jpg (vectorstock)
        elif [ $MARKET -eq 4 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///');
            do convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        # if eps and jpg (veectezy)
        elif [ $MARKET -eq 5 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///');
            do convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        # (shuttestock)
        elif [ $MARKET -eq 6 ]; then
          echo -e "" >/dev/null 2>&1
        # (flaticon)
        elif [ $MARKET -eq 7 ]; then
          echo -e "" >/dev/null 2>&1
      fi
      cd $DIRECTORY/.temp
      if [ $MARKET -eq 1 ]; then
        for dir in $(ls | cut -f 1)
          do
          cd $dir
          zip ../../$dir.zip *.eps *.png >/dev/null 2>&1
          cd ..
        done
        elif [ $MARKET -eq 2 ]; then
          for dir in $(ls | cut -f 1)
            do
            cd $dir
            zip ../../$dir.zip *.eps *.jpg >/dev/null 2>&1
            cd ..
          done
        elif [ $MARKET -eq 3 ]; then
          for dir in $(ls | cut -f 1)
            do
            cd $dir
            zip ../../$dir.zip *.eps *.jpg >/dev/null 2>&1
            cd ..
          done
        elif [ $MARKET -eq 4 ]; then
          for dir in $(ls | cut -f 1)
            do
            cd $dir
            zip ../../$dir.zip *.eps >/dev/null 2>&1
            cd ..
          done
          for i in $(find -name "*.jpg" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
        elif [ $MARKET -eq 5 ]; then
          for i in $(find -name "*.eps" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
          for i in $(find -name "*.jpg" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
        elif [ $MARKET -eq 6 ]; then
          for i in $(find -name "*.eps" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
        elif [ $MARKET -eq 7 ]; then
          for i in $(find -name "*.svg" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
      fi
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
    "Png")
      check_id
      echo -e "Export to: \033[1;36mPNG\033[0m"
      echo -e ""
      echo -e "DPI:"
      echo -e "  \033[1;33m[1] 72\033[0m"
      echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[3] 300\033[0m"
      echo -e "  \033[1;33m[4] 600\033[0m"
      read -e -p "Number: " DPI_NUM
      if [ -z $DPI_NUM ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
        exit
        elif [ $DPI_NUM -eq 1 ]; then
        DPI="72"
        elif [ $DPI_NUM -eq 2 ]; then
        DPI="96"
        elif [ $DPI_NUM -eq 3 ]; then
        DPI="300"
        elif [ $DPI_NUM -eq 4 ]; then
        DPI="600"
        else
        echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
        exit
      fi
      echo -e "Depth:"
      echo -e "  \033[1;33m[1] 8-bit\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] 16-bit\033[0m"
      read -e -p "Number: " DEPTH
      if [ -z $DEPTH ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Depth is empty."
        exit
        elif [ $DEPTH -eq 1 ]; then
        DEPTH="8"
        elif [ $DEPTH -eq 2 ]; then
        DEPTH="16"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$DEPTH-bit" is not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Png" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      to_png
      cd $DIRECTORY/.temp
      for i in *.png;
        do mv "$i" "../${i%.*}-$DEPTH-bit-$DPI-dpi.png"
      done
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
   "Jpg")
      echo -e "Export to: \033[1;36mJPG\033[0m"
      echo -e ""
      echo -e "DPI:"
      echo -e "  \033[1;33m[1] 72\033[0m"
      echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[3] 300\033[0m"
      echo -e "  \033[1;33m[4] 600\033[0m"
      read -e -p "Number: " DPI_NUM
      if [ -z $DPI_NUM ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
        exit
        elif [ $DPI_NUM -eq 1 ]; then
        DPI="72"
        elif [ $DPI_NUM -eq 2 ]; then
        DPI="96"
        elif [ $DPI_NUM -eq 3 ]; then
        DPI="300"
        elif [ $DPI_NUM -eq 4 ]; then
        DPI="600"
        else
        echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
        exit
      fi
      echo -e "Color Profile:"
      echo -e "  \033[1;33m[1] RGB > Default\033[0m \t(sRGB)"
      echo -e "  \033[1;33m[2] CMYK > Krita\033[0m \t(Chemical proof)"
      echo -e "  \033[1;33m[3] CMYK > Generic\033[0m \t(SWOP2006 Coated3v2)"
      echo -e "  \033[1;33m[4] CMYK > Corel\033[0m \t(Japan Color 2001 Coated)"
      echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m \t(U.S. Web Coated (SWOP) v2)"
      read -e -p "Number Profile: " ICC
      if [ -z $ICC ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Color profile is empty."
        elif [ $ICC -eq 1 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 2 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 3 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 4 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 5 ]; then
        echo -e "" >/dev/null 2>&1
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$ICC" is not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Jpg" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      echo -e "Background:"
      echo -e "  \033[1;33m[1]\033[0m White"
      echo -e "  \033[1;33m[2]\033[0m Black"
      read -e -p "Background: " -i "1" BGCOLOR
      if [ -z $BGCOLOR ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Background color is empty."
        elif [ $BGCOLOR -eq 1 ]; then
        bGCOLOR="white"
        elif [ $BGCOLOR -eq 2 ]; then
        bGCOLOR="black"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$BGCOLOR" is not support."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      to_png
      cd $DIRECTORY/.temp
      if [ $ICC -eq 1 ]; then
        PROFILENAME="srgb"
        for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace sRGB \
            -background $BGCOLOR \
            -profile $SRGB \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
        done
        elif [ $ICC -eq 2 ]; then
          PROFILENAME="cmyk-krita"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $CHEMICAL_PROOF \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
          done
        elif [ $ICC -eq 3 ]; then
          PROFILENAME="cmyk-generic"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $SWOP2006_COATED3V2 \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
          done
        elif [ $ICC -eq 4 ]; then
          PROFILENAME="cmyk-corel"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $JAPANCOLOR2001COATED \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
          done
        elif [ $ICC -eq 5 ]; then
          PROFILENAME="cmyk-adobe"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $USWEBCOATEDSWOP \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
          done
        else
          echo -e "\033[1;91m[FAILED]\033[0m Color Profile is not support."
        fi
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
    "Tif")
      echo -e "Export to: \033[1;36mTIF\033[0m"
      echo -e ""
      echo -e "DPI:"
      echo -e "  \033[1;33m[1] 72\033[0m"
      echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[3] 300\033[0m"
      echo -e "  \033[1;33m[4] 600\033[0m"
      read -e -p "Number: " DPI_NUM
      if [ -z $DPI_NUM ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
        exit
        elif [ $DPI_NUM -eq 1 ]; then
        DPI="72"
        elif [ $DPI_NUM -eq 2 ]; then
        DPI="96"
        elif [ $DPI_NUM -eq 3 ]; then
        DPI="300"
        elif [ $DPI_NUM -eq 4 ]; then
        DPI="600"
        else
        echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
        exit
      fi
      echo -e "Depth:"
      echo -e "  \033[1;33m[1] 8-bit\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] 16-bit\033[0m"
      read -e -p "Number: " DEPTH
      if [ -z $DEPTH ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Depth is empty."
        exit
        elif [ $DEPTH -eq 1 ]; then
        DEPTH="8"
        elif [ $DEPTH -eq 2 ]; then
        DEPTH="16"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$DEPTH-bit" is not support."
        exit
      fi
      echo -e "Color Profile:"
      echo -e "  \033[1;33m[1] RGB > Default\033[0m \t(sRGB)"
      echo -e "  \033[1;33m[2] CMYK > Krita\033[0m \t(Chemical proof)"
      echo -e "  \033[1;33m[3] CMYK > Generic\033[0m \t(SWOP2006 Coated3v2)"
      echo -e "  \033[1;33m[4] CMYK > Corel\033[0m \t(Japan Color 2001 Coated)"
      echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m \t(U.S. Web Coated (SWOP) v2)"
      read -e -p "Number Profile: " ICC
      if [ -z $ICC ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Color profile is empty."
        elif [ $ICC -eq 1 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 2 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 3 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 4 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 5 ]; then
        echo -e "" >/dev/null 2>&1
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$ICC" is not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Tif" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      echo -e "Background:"
      echo -e "  \033[1;33m[1]\033[0m White"
      echo -e "  \033[1;33m[2]\033[0m Black"
      read -e -p "Background: " -i "1" BGCOLOR
      if [ -z $BGCOLOR ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Background color is empty."
        elif [ $BGCOLOR -eq 1 ]; then
        bGCOLOR="white"
        elif [ $BGCOLOR -eq 2 ]; then
        bGCOLOR="black"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$BGCOLOR" is not support."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      to_png
      cd $DIRECTORY/.temp
      if [ $ICC -eq 1 ]; then
        PROFILENAME="srgb"
        for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace sRGB \
            -background $BGCOLOR \
            -profile $SRGB \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
        done
        elif [ $ICC -eq 2 ]; then
          PROFILENAME="cmyk-krita"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $CHEMICAL_PROOF \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
          done
        elif [ $ICC -eq 3 ]; then
          PROFILENAME="cmyk-generic"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $SWOP2006_COATED3V2 \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
          done
        elif [ $ICC -eq 4 ]; then
          PROFILENAME="cmyk-corel"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $JAPANCOLOR2001COATED \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
          done
        elif [ $ICC -eq 5 ]; then
          PROFILENAME="cmyk-adobe"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $USWEBCOATEDSWOP \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
          done
        else
          echo -e "\033[1;91m[FAILED]\033[0m Color Profile is not support."
        fi
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
    "Pdf")
      echo -e "Export to: \033[1;36mPDF\033[0m"
      echo -e ""
      echo -e "Output"
      echo -e "  \033[1;33m[1] Vector\033[0m \t\t(RGB/CMYK)"
      echo -e "  \033[1;33m[2] Raster\033[0m \t\t(CMYK Only. Support Color Profile)"
      read -e -p "Number: " output
      if [ -z $output ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Output file is empty."
        elif [ $output -eq 1 ]; then
        echo -e "Colorspace"
        echo -e "  \033[1;33m[1] RGB\033[0m \t\t(recommended)"
        echo -e "  \033[1;33m[2] CMYK\033[0m"
        read -e -p "Number: " COLOR
        if [ $COLOR -gt 2 ]; then
          echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
          exit
        fi
        elif [ $output -eq 2 ]; then
          echo -e "DPI:"
          echo -e "  \033[1;33m[1] 72\033[0m"
          echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
          echo -e "  \033[1;33m[3] 300\033[0m"
          echo -e "  \033[1;33m[4] 600\033[0m"
          read -e -p "Number: " DPI_NUM
          if [ -z $DPI_NUM ]; then
            echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
            exit
            elif [ $DPI_NUM -eq 1 ]; then
            DPI="72"
            elif [ $DPI_NUM -eq 2 ]; then
            DPI="96"
            elif [ $DPI_NUM -eq 3 ]; then
            DPI="300"
            elif [ $DPI_NUM -eq 4 ]; then
            DPI="600"
            else
            echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
            exit
          fi
          echo -e "Color Profile:"
          echo -e "  \033[1;33m[1] RGB > Default\033[0m \t(sRGB)"
          echo -e "  \033[1;33m[2] CMYK > Krita\033[0m \t(Chemical proof)"
          echo -e "  \033[1;33m[3] CMYK > Generic\033[0m \t(SWOP2006 Coated3v2)"
          echo -e "  \033[1;33m[4] CMYK > Corel\033[0m \t(Japan Color 2001 Coated)"
          echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m \t(U.S. Web Coated (SWOP) v2)"
          read -e -p "Number Profile: " ICC
          if [ -z $ICC ]; then
            echo -e "\033[1;91m[FAILED]\033[0m Color profile is empty."
            elif [ $ICC -eq 1 ]; then
            echo -e "" >/dev/null 2>&1
            elif [ $ICC -eq 2 ]; then
            echo -e "" >/dev/null 2>&1
            elif [ $ICC -eq 3 ]; then
            echo -e "" >/dev/null 2>&1
            elif [ $ICC -eq 4 ]; then
            echo -e "" >/dev/null 2>&1
            elif [ $ICC -eq 5 ]; then
            echo -e "" >/dev/null 2>&1
            else
            echo -e "\033[1;91m[FAILED]\033[0m "$ICC" is not support."
            exit
          fi
      else
        echo -e "\033[1;91m[FAILED]\033[0m "$output" is not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Pdf" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      read -e -p "Merge PDF (y/N): " MERGE
        if [[ $MERGE =~ ^[Yy]$ ]]; then
          echo -e "Merge PDF: \033[1;33mYes\033[0m"
          else
          echo -e "Merge PDF: \033[1;33mNo\033[0m"
          MERGE="n"
        fi
      mkdir -p "$DIRECTORY/.temp"
      #convert vector
      if [ $output -eq 1 ]; then
        to_svg
        cd $DIRECTORY/.temp
        if [ $COLOR -eq 1 ]; then
          PROFILENAME="srgb"
          for i in *.svg;
          do cat "$i" | inkscape --pipe -C \
          -o "${i%.*}-vector-$PROFILENAME.pdf" \
            >/dev/null 2>&1
          done
          # merge
          if [ $MERGE == 'y' ]; then
            mkdir -p merge
            mv *-vector-$PROFILENAME.pdf merge/
            gs -q -dBATCH -dNOPAUSE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../$DIRECTORY-merge-vector-$PROFILENAME.pdf \
              merge/*.pdf;
          else
            mv *-vector-$PROFILENAME.pdf ../
          fi
        elif [ $COLOR -eq 2 ]; then
          PROFILENAME="cmyk"
          for i in *.svg;
        do cat "$i" | inkscape --pipe -C \
        -o "${i%.*}.pdf" \
        >/dev/null 2>&1
          done
          rm *.svg
          DEVICE="pdfwrite"
          for i in *.pdf;
          do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
            -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK \
            -sOutputFile="${i%.*}-vector-$PROFILENAME.pdf" "$i"
            sleep 1
          done
          # merge
          if [ $MERGE == 'y' ]; then
            mkdir -p merge
            mv *-vector-$PROFILENAME.pdf merge/
            gs -q -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \
            -sOutputFile=../$DIRECTORY-merge-vector-$PROFILENAME.pdf \
            merge/*.pdf;
          else
            mv *-vector-$PROFILENAME.pdf ../
          fi
        else
          echo -e "\033[1;91m[FAILED]\033[0m Can not convert."
          exit
        fi
      # convert raster
      elif [ $output -eq 2 ]; then
        if [ $ICC -eq 1 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="srgb"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace sRGB \
                -profile $SRGB \
                "${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
              *.pdf;
            cd ..
          else
            PROFILENAME="srgb"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
                -quality 100 \
                -colorspace sRGB \
                -depth 8 \
                -profile $SRGB \
                "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        elif [ $ICC -eq 2 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="cmyk-krita"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $CHEMICAL_PROOF \
                "../${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
          *.pdf;
            cd ..
          else
            PROFILENAME="cmyk-krita"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
              -depth 8 \
              -quality 100 \
              -colorspace CMYK \
              -profile $CHEMICAL_PROOF \
              "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        elif [ $ICC -eq 3 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="cmyk-generic"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
              -depth 8 \
              -quality 100 \
              -colorspace CMYK \
              -profile $SWOP2006_COATED3V2 \
              "${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
          *.pdf;
            cd ..
          else
            PROFILENAME="cmyk-generic"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $SWOP2006_COATED3V2 \
                "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        elif [ $ICC -eq 4 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="cmyk-corel"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $JAPANCOLOR2001COATED \
                "${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
              *.pdf;
            cd ..
          else
            PROFILENAME="cmyk-corel"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $JAPANCOLOR2001COATED \
                "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        elif [ $ICC -eq 5 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="cmyk-adobe"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $USWEBCOATEDSWOP \
                "${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
              *.pdf;
            cd ..
          else
            PROFILENAME="cmyk-adobe"
            to_png
            cd $DIRECTORY/.temp
            for i in *.png; do
              convert "$i" \
                -quality 100 \
                -colorspace CMYK \
                -depth 8 \
                -profile $USWEBCOATEDSWOP \
                "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        else
          echo -e "\033[1;91m[FAILED]\033[0m Color Profile is not support."
          exit
        fi
      else
        echo -e "\033[1;91m[FAILED]\033[0m Can not convert."
        exit
      fi
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
    "Svg")
      echo -e "Export to: \033[1;36mSVG\033[0m"
      echo -e ""
      read -e -p "Folder Output: " -i "Svg" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      to_svg
      cd $DIRECTORY/.temp
      mv *.svg ..
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
    "Eps")
      echo -e "Export to: \033[1;36mEPS\033[0m"
      echo -e ""
      eps_validator
      echo -e ""
      read -e -p "Folder Output: " -i "Eps" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      to_eps
      cd $DIRECTORY/.temp
      PROFILENAME="srgb"
      for i in *.eps;
        do mv "$i" "../${i%.*}-$PROFILENAME.eps"
      done
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
    "Ai")
      echo -e "Export to: \033[1;36mAI\033[0m"
      echo -e ""
      echo -e "Colorspace:"
      echo -e "  \033[1;33m[1] RGB\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] CMYK\033[0m"
      read -e -p "Number: " COLOR
      if [ $COLOR -gt 2 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
        exit
        elif [ $COLOR -lt 1 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Ai" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      to_pdf
      cd $DIRECTORY/.temp
      #srgb
      if [ $COLOR -eq 1 ]; then
        PROFILENAME="srgb"
        DEVICE="pdfwrite"
        for i in *.pdf;
          do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
            -sOutputFile="../${i%.*}-$PROFILENAME.ai" "$i"
        done
        #cmyk
        elif [ $COLOR -eq 2 ]; then
          PROFILENAME="cmyk"
          DEVICE="pdfwrite"
          for i in *.pdf;
            do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
              -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK \
              -sOutputFile="../${i%.*}-$PROFILENAME.ai" "$i"
          done
      fi
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
    "Psd")
      echo -e "Export to: \033[1;36mPSD\033[0m"
      echo -e ""
      echo -e "Depth:"
      echo -e "  \033[1;33m[1] 8-bit\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] 16-bit\033[0m"
      read -e -p "Number: " DEPTH
      if [ -z $DEPTH ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Depth is empty."
        exit
        elif [ $DEPTH -eq 1 ]; then
        DEPTH="8"
        elif [ $DEPTH -eq 2 ]; then
        DEPTH="16"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$DEPTH-bit" is not support."
        exit
      fi
      echo -e "Colorspace:"
      echo -e "  \033[1;33m[1] RGB\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] CMYK\033[0m"
      read -e -p "Number: " COLOR
      if [ $COLOR -gt 2 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
        exit
        elif [ $COLOR -lt 1 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Psd" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      to_pdf
      cd $DIRECTORY/.temp
      #srgb
      if [ $COLOR -eq 1 ]; then
        PROFILENAME="srgb"
        if [ $DEPTH -eq 16 ]; then
        DEVICE=psdrgb16
        else
        DEVICE=psdrgb
        fi
        for i in *.pdf;
          do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
            -sOutputFile="../${i%.*}-$PROFILENAME-$DEPTH-bit.psd" "$i"
        done
        #cmyk
        elif [ $COLOR -eq 2 ]; then
          PROFILENAME="cmyk"
          if [ $DEPTH -eq 16 ]; then
          DEVICE=psdcmyk16
          else
          DEVICE=psdcmyk
          fi
          for i in *.pdf;
            do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
              -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK \
              -sOutputFile="../${i%.*}-$PROFILENAME-$DEPTH-bit.psd" "$i"
          done
      fi
      cd .. && rm -r .temp
      cd ..
      finish
      break
      ;;
    "Webp")
      echo -e "Export to: \033[1;36mWEBP\033[0m"
      echo -e ""
      echo -e "DPI:"
      echo -e "  \033[1;33m[1] 72\033[0m"
      echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[3] 300\033[0m"
      echo -e "  \033[1;33m[4] 600\033[0m"
      read -e -p "Number: " DPI_NUM
      if [ -z $DPI_NUM ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
        exit
        elif [ $DPI_NUM -eq 1 ]; then
        DPI="72"
        elif [ $DPI_NUM -eq 2 ]; then
        DPI="96"
        elif [ $DPI_NUM -eq 3 ]; then
        DPI="300"
        elif [ $DPI_NUM -eq 4 ]; then
        DPI="600"
        else
        echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
        exit
      fi
      read -e -p "Folder Output: " -i "Webp" DIRECTORY
      if [ -z $DIRECTORY ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      mkdir -p "$DIRECTORY/.temp"
      for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
      do
        inkscape -j -i $id -o "$DIRECTORY/.temp/$id.png" $SOURCE -d $DPI >/dev/null 2>&1
      done
      cd $DIRECTORY/.temp
      for i in *.png; do
          cwebp -quiet "$i" -o "../${i%.*}-$DPI-dpi.webp";
      done
      cd .. && rm -r .temp
      finish
      break
      ;;
    "Cancel")
      clear
      echo -e "\033[1;33mEXIT!.\033[0m"
      exit
      ;;
    *) echo -e "\033[1;91m[FAILED]\033[0m" $REPLY. Try again.;;
  esac
done;
