#!/usr/bin/env bash

TITLE="LangitKetujuh Export"
NAME=$(basename "$0")
INSTALLDIR=$(which basename)
INKSCAPEDIR=$(which inkscape)
VERSION="1.16.4"
WEB="https://langitketujuh.id"
LICENSE="GPL-2.0-only"

TMP="/tmp"

SRGB="/usr/share/color/icc/colord/sRGB.icc"
CHEMICAL_PROOF="/usr/share/color/icc/krita/cmyk.icm"
SWOP2006_COATED3V2="/usr/share/color/icc/idealliance/SWOP2006_Coated3v2.icc"
JAPANCOLOR2001COATED="/usr/share/color/icc/adobe/JapanColor2001Coated.icc"
USWEBCOATEDSWOP="/usr/share/color/icc/adobe/USWebCoatedSWOP.icc"

SOURCE=$1
IDPATTERN=$2
CACHE=".cache"
OPTIM_SOURCE=".optim_$SOURCE"

usage() {
 echo -e "\n\033[1;36m $TITLE $VERSION\033[0m"
 echo -e "\e[3m Yet Another CLI Exporter\e[0m"
 echo -e "\e[3m Fork from inkporter-cli\e[0m"
 echo
    cat <<- EOF
 Website  : $WEB
 License  : $LICENSE

 Usage    : $NAME [file.svg] [id]

 Option   : -i,--install        # install depedency color profile
            -h,--help           # show this help
            -v,--version        # show $NAME version

 Feature  : * File output: PNG, JPG, TIF, PDF, SVG, EPS, AI, PSD, & WEBP.
            * Deep per inch (DPI).
            * Depth 16-bit.
            * Colorspace RGB/CMYK.
            * Embed color profile CMYK for jpg, tif, psd, and pdf raster.
                RGB   : Default - srgb
                CMYK  : Krita   - chemical proof
                CMYK  : Generic - swop2006 coated3v2
                CMYK  : Corel   - japan color 2001 coated
                CMYK  : Adobe   - u.s. web coated (swop) v2
            * Merge PDF

EOF
}

check_root(){
  if [ $(id -u) -ne 0 ]; then
  echo -e "\033[1;91m[FAILED]\033[0m Please run as root!"
  exit
  fi
}

for arg in "$@"; do
  case $arg in
    --install|-i)
      check_root
      if xbps-install --version >/dev/null 2>&1;
        then
        echo -e "\033[1;36m[1]\033[0m Install depedencies > XBPS distro"
        mkdir -pv $TMP
        xbps-install -Sy xbps;
        xbps-install sudo curl wget base-files colord unzip which \
        inkscape ghostscript ImageMagick libwebp-tools python3-scour zip
        elif dnf --version >/dev/null 2>&1;
          then
          echo -e "\033[1;36m[1]\033[0m Install depedencies > RPM distro"
          mkdir -pv $TMP
          yum install sudo curl wget fedora-release colord unzip which \
          inkscape ghostscript ImageMagick libwebp-tools python3-scour zip
        elif pacman --version >/dev/null 2>&1;
          then
          echo -e "\033[1;36m[1]\033[0m Install depedencies > Pacman distro"
          mkdir -pv $TMP
          pacman -Syy;
          pacman -S sudo curl wget lsb-release colord unzip which \
          inkscape ghostscript imagemagick libwebp \
          poppler poppler-glib poppler-qt5 scour zip
        elif apt --version >/dev/null 2>&1;
          then
          echo -e "\033[1;36m[1]\033[0m Install depedencies > APT distro"
          mkdir -pv $TMP
          apt -y update;
          apt install sudo curl wget lsb-release colord unzip \
          inkscape ghostscript imagemagick webp python3-scour zip
        elif zypper --version >/dev/null 2>&1;
          then
          echo -e "\033[1;36m[1]\033[0m Install depedencies > Zypper distro"
          mkdir -pv $TMP
          zypper install sudo curl wget lsb-release colord unzip which \
          inkscape ghostscript ImageMagick libwebp-tools python3-scour zip
        else
          echo -e "\033[1;36m[1]\033[0m Install depedencies > What your os?"
        fi
        echo -e "\033[1;36m[2]\033[0m Adobe icc"
        echo -e "[*] Checking"
        if find /usr/share/color/icc/adobe/ -name "*.icc" -type f >/dev/null 2>&1; then
          echo -e "[*] Adobe icc installed"
          else
          echo -e "[*] Preparing new dir $TMP"
          mkdir $TMP/adobe-icc >/dev/null 2>&1
          cd $TMP/adobe-icc
          echo -e "[*] Download Adobe icc Profiles"
          wget -c https://download.adobe.com/pub/adobe/iccprofiles/mac/AdobeICCProfilesCS4Mac_end-user.zip >/dev/null 2>&1
          echo -e "[*] Unzip"
          unzip -o -q AdobeICCProfilesCS4Mac_end-user.zip >/dev/null 2>&1
          echo -e "[*] Installing"
          install -D -m644 -t /usr/share/color/icc/adobe/ */RGB/*.icc
          install -D -m644 -t /usr/share/color/icc/adobe/ */CMYK/*.icc
          install -D -m644 -t /usr/share/doc/adobe */*.pdf
          if find /usr/share/color/icc/adobe/ -name "*.icc" -type f >/dev/null 2>&1; then
            echo -e "" >/dev/null 2>&1
            else
            echo -e "[-] Adobe icc is not already installed!"
            exit;
          fi
        fi
        echo -e "\033[1;36m[3]\033[0m Krita cmyk icm"
        echo -e "[*] Checking"
        if find /usr/share/color/icc/krita/ -name "*.icm" -type f >/dev/null 2>&1; then
          echo -e "[*] Krita cmyk icm installed"
          else
          echo -e "[*] Preparing new dir $TMP"
          mkdir $TMP/krita-icc >/dev/null 2>&1
          cd $TMP/krita-icc
          echo -e "[*] Download Krita cmyk icm Profiles"
          wget -c https://github.com/KDE/krita/raw/master/krita/data/profiles/cmyk.icm >/dev/null 2>&1
          echo -e "[*] Installing"
          install -D -m644 -t /usr/share/color/icc/krita *.icm
          if find /usr/share/color/icc/krita/ -name "*.icm" -type f >/dev/null 2>&1; then
            echo -e "" >/dev/null 2>&1
            else
            echo -e "[-] Krita cmyk icm is not already installed!"
            exit;
          fi
        fi
        echo -e "\033[1;36m[4]\033[0m IDEAlliance icc"
        echo -e "[*] Checking"
        if find /usr/share/color/icc/idealliance/ -name "*.icc" -type f >/dev/null 2>&1; then
          echo -e "[*] IDEAlliance icc installed"
          else
          echo -e "[*] Preparing new dir $TMP"
          mkdir $TMP/idea-icc >/dev/null 2>&1
          cd $TMP/idea-icc
          echo -e "[*] Download SWOP2006_Coated3v2 icc Profiles"
          wget -c http://www.color.org/registry/profiles/SWOP2006_Coated3v2.icc >/dev/null 2>&1
          echo -e "[*] Installing"
          install -D -m644 -t /usr/share/color/icc/idealliance *.icc
          if find /usr/share/color/icc/idealliance/ -name "*.icc" -type f >/dev/null 2>&1; then
            echo -e "" >/dev/null 2>&1
            else
            echo -e "[-] IDEAlliance icc is not already installed!"
            exit;
          fi
        fi
        echo -e "\033[1;36m[FINISH]\033[0m Installation was successful!"
      exit 0
      ;;
    --deps|-d)
      echo -e "\033[1;33minkscape version: \033[0m"
      if inkscape --version | grep "Inkscape 1.*" ;then
          echo >/dev/null 2>&1; else
          echo
          echo "$NAME version: v$VERSION"
          echo "only for inkscape 1.x!";
      fi
      echo
      echo -e "\033[1;33mConvert ImageMagick version: \033[0m"
      convert -version | grep Version:
      echo
      echo -e "\033[1;33mghostscript version: \033[0m"
      gs --version
      echo
      echo -e "\033[1;33mwebp version: \033[0m"
      cwebp -version
      echo
      exit 0
      ;;
    --help|-h)
      usage
      exit 0
      ;;
    --version|-v)
      echo -e "\033[1;33m $NAME\033[0m version $VERSION"
      exit 0
  esac
done

search_file() {
  find . -name "$SOURCE" -type f | wc -c
}

check_file() {
  # check empty file
  if [ -z $SOURCE ]; then
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m The SVG file is empty."
    exit;
    # check file not found
    elif [ $(search_file) -eq 0 ]; then
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m File $SOURCE not found."
    exit;
    else
    echo -e "" >/dev/null 2>&1;
  fi
}

id() {
  rendersvg --query-all "$SOURCE" | grep "$IDPATTERN" | cut -d "," -f 1
}

check_id() {
  # check empty id
  if [ -z $IDPATTERN ]; then
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m The ID object is empty."
    rm_optimized_svg; exit;
    # check wrong id
    elif [ -z "$(id)" ]; then
    echo -e ""
    echo -e "\033[1;91m[FAILED]\033[0m Similar ID object \033[0;36m$IDPATTERN\033[0m was not found."
    rm_optimized_svg; exit;
    else
    echo >/dev/null 2>&1;
  fi
}

check_depedencies() {
  if inkscape --version >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m inkscape is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if find . -name "$CHEMICAL_PROOF" -type f >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m Krita cmyk icm is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if convert -version >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m ImageMagick is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if gs --version >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m ghostscript is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if cwebp -version >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m webp, libwebp or libwebp-tools is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if find /usr/share/color/icc/adobe/ -name "*.icc" -type f >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m Adobe icc is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if find /usr/share/color/icc/krita/ -name "*.icm" -type f >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m Krita cmyk icm is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
  if find /usr/share/color/icc/idealliance/ -name "*.icc" -type f >/dev/null 2>&1; then
    echo >/dev/null 2>&1
    else
    echo -e "\033[1;91m[FAILED]\033[0m Idealliance icc is not already installed."
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
    echo -e "Please run \033[1;33ml7-export --install\033[0m";
    exit;
  fi
}

# check first
check_file
check_id
check_depedencies

optimized_svg() {
  scour -q -i $SOURCE -o $OPTIM_SOURCE >/dev/null 2>&1
}

rm_optimized_svg() {
  rm $OPTIM_SOURCE >/dev/null 2>&1
}

eps_validator() {
  optimized_svg

  check_fill_opacity() {
  cat $OPTIM_SOURCE | grep 'fill-opacity=".[^ ]*"' | grep -oE 'id="[^ ]*' | tr -d 'id=")' | sort -u | xargs
  }

  check_filter() {
  cat $OPTIM_SOURCE | grep -oE '<filter id="[^ ]*"' | sed 's/<filter id="//g' | tr -d '")' | sort -u | xargs
  }

  check_pattern() {
  cat $OPTIM_SOURCE | grep -oE '<pattern id="[^ ]*"' | sed 's/<pattern id="//g' | tr -d '")' | sort -u | xargs
  }

  check_image() {
  cat $OPTIM_SOURCE | grep -oE '<image id="[^ ]*"' | sed 's/<image id="//g' | tr -d '")' | sort -u | xargs
  }

  check_linear_gradient() {
  cat $OPTIM_SOURCE | grep -oE '<linearGradient id="[^ ]*"' | sed 's/<linearGradient id="//g' | tr -d '")' | sort -u | xargs
  }

  check_radial_gradient() {
  cat $OPTIM_SOURCE | grep -oE '<radialGradient id="[^ ]*"' | sed 's/<radialGradient id="//g' | tr -d '")' | sort -u | xargs
  }

  check_mesh_gradient() {
  cat $OPTIM_SOURCE | grep -oE '<meshgradient id="[^ ]*"' | sed 's/<meshgradient id="//g' | tr -d '")' | sort -u | xargs
  }

  check_clip_path() {
  cat $OPTIM_SOURCE | grep -oE '<clipPath id="[^ ]*"' | sed 's/<clipPath id="//g' | tr -d '")' | sort -u | xargs
  }

  check_mask() {
  cat $OPTIM_SOURCE | grep -oE '<mask id="[^ ]*"' | sed 's/<mask id="//g' | tr -d '")' | sort -u | xargs
  }

  if [ $(echo -n $(check_fill_opacity) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Fill Opacity: \t\t\033[1;33m$(check_fill_opacity)\033[0m"
  fi
  if [ $(echo -n $(check_filter) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Filter Object: \t\t\033[1;33m$(check_filter)\033[0m"
  fi
  if [ $(echo -n $(check_pattern) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Pattern Object: \t\033[1;33m$(check_pattern) \033[0m"
  fi
  if [ $(echo -n $(check_image) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Bitmap Object: \t\t\033[1;33m$(check_image)\033[0m"
  fi
  if [ $(echo -n $(check_linear_gradient) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Linear Gradient: \t\033[1;33m$(check_linear_gradient) \033[0m"
  fi
  if [ $(echo -n $(check_radial_gradient) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Radial Gradient: \t\033[1;33m$(check_radial_gradient) \033[0m"
  fi
  if [ $(echo -n $(check_mesh_gradient) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Mesh Gradient: \t\t\033[1;33m$(check_mesh_gradient) \033[0m"
  fi
  if [ $(echo -n $(check_clip_path) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Clip Path: \t\t\033[1;33m$(check_clip_path) \033[0m"
  fi
  if [ $(echo -n $(check_mask) | wc -c) -eq 0 ]; then
    echo -e >/dev/null 2>&1
    else
    echo -e "Mask Object: \t\t\033[1;33m$(check_mask) \033[0m"
  fi
  if [ $(echo -n $(check_fill_opacity) $(check_filter) $(check_pattern) $(check_image) $(check_linear_gradient) $(check_radial_gradient) $(check_mesh_gradient) $(check_clip_path) $(check_mask) | wc -c) -eq 0 ]; then
    echo -e "\033[1;36m[VALID]\033[0m $SOURCE supports EPS8"
    else
    echo -e ""
    echo -e "\033[1;33m[WARNING]\033[0m $SOURCE allows some elements in it to be raster"
    echo -e ""
    read -e -p "Are you sure continue? [y/N]: " CONTINUE
    if [[ $CONTINUE =~ ^[Yy]$ ]]; then
      echo -e >/dev/null 2>&1
      else
      echo -e ""
      rm_optimized_svg; exit;
    fi
  fi
}

to_png() {
  for ID_LIST in $(id); do
    inkscape \
      --export-id="$ID_LIST" \
      --batch-process \
      --export-id-only \
      --export-type=png \
      --export-dpi=$DPI \
      --export-filename="$DIRECTORY/$CACHE/$ID_LIST.png" \
      $SOURCE >/dev/null 2>&1
  done
}

to_svg() {
  for ID_LIST in $(id); do
    inkscape \
      --export-id="$ID_LIST" \
      --batch-process \
      --export-id-only \
      --export-type=svg \
      --export-plain-svg \
      --export-filename="$DIRECTORY/$CACHE/$ID_LIST.svg" \
      $SOURCE >/dev/null 2>&1
  done
}

to_eps() {
  for ID_LIST in $(id); do
    inkscape \
      --export-id="$ID_LIST" \
      --batch-process \
      --export-id-only \
      --export-type=eps \
      --export-text-to-path \
      --export-ignore-filters \
      --export-filename="$DIRECTORY/$CACHE/$ID_LIST.eps" \
      $SOURCE >/dev/null 2>&1
  done
}

# For pdf, ai and psd
to_pdf() {
  for ID_LIST in $(id); do
    inkscape \
      --export-id="$ID_LIST" \
      --batch-process \
      --export-id-only \
      --export-type=pdf \
      --export-text-to-path \
      --export-ignore-filters \
      --export-filename="$DIRECTORY/$CACHE/$ID_LIST.pdf" \
      $SOURCE >/dev/null 2>&1
  done
}

loading() {
  echo -e "\033[1;33m[WORKING]\033[0m Export in progress."
}

finish() {
  echo -e ""
  echo -e "\033[1;36m[FINISH]\033[0m Job done."
}

PS3='Number: '
options=("Market" "Png" "Jpg" "Tif" "Pdf" "Svg" "Eps" "Ai" "Psd" "Webp" "Cancel")
clear
echo -e "\033[1;36m$TITLE v$VERSION \033[0m"
echo -e "\e[3mYet Another CLI Exporter\e[0m"
echo

select opt in "${options[@]}"
do
  case $opt in
    "Market")
      echo -e "Export to: \033[1;36mMARKETPLACE \033[0m"
      echo -e ""
      eps_validator
      echo -e ""
      echo -e "Marketplace \t\tOutput"
      echo -e "  \033[1;33m[1]  Pngtree\033[0m \t\t(eps+png).zip"
      echo -e "  \033[1;33m[2]  Freepik\033[0m \t\t(eps+jpg).zip"
      echo -e "  \033[1;33m[3]  Adobestock\033[0m \t(eps+jpg).zip"
      echo -e "  \033[1;33m[4]  Vectorstock\033[0m \t(eps).zip+jpg"
      echo -e "  \033[1;33m[5]  Lovepik\033[0m \t\t(eps).zip+png"
      echo -e "  \033[1;33m[6]  Vecteezy\033[0m \teps+jpg"
      echo -e "  \033[1;33m[7]  Dreamstime\033[0m \teps+jpg"
      echo -e "  \033[1;33m[8]  iStock\033[0m \t\teps+jpg"
      echo -e "  \033[1;33m[9]  Shutterstock\033[0m \teps"
      echo -e "  \033[1;33m[10] Flaticon\033[0m \tsvg"
      echo -e ""
      read -e -p "Number: " MARKET
      if [ -z $MARKET ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Marketplace is empty."
        exit
        elif [ $MARKET -eq 1 ]; then
        MARKETNAME="Pngtree"
        elif [ $MARKET -eq 2 ]; then
        MARKETNAME="Freepik"
        elif [ $MARKET -eq 3 ]; then
        MARKETNAME="Adobestock"
        elif [ $MARKET -eq 4 ]; then
        MARKETNAME="Vectorstock"
        elif [ $MARKET -eq 5 ]; then
        MARKETNAME="Lovepik"
        elif [ $MARKET -eq 6 ]; then
        MARKETNAME="Vecteezy"
        elif [ $MARKET -eq 7 ]; then
        MARKETNAME="Dreamstime"
        elif [ $MARKET -eq 8 ]; then
        MARKETNAME="iStock"
        elif [ $MARKET -eq 9 ]; then
        MARKETNAME="Shutterstock"
        elif [ $MARKET -eq 10 ]; then
        MARKETNAME="Flaticon"
        else
        echo -e "\033[1;91m[FAILED]\033[0m Marketplace not support."
        exit
      fi
      # shutterstock and flaticon no need dpi
      if [ $MARKET -ge 9 ]; then
        echo -e ""  >/dev/null 2>&1
        # marketplace 1-5 need dpi
        elif  [ $MARKET -le 8 ]; then
          echo -e ""
          echo -e "Preview DPI:"
          echo -e "  \033[1;33m[1] 96\033[0m"
          echo -e "  \033[1;33m[2] 300\033[0m"
          echo -e "  \033[1;33m[3] 600\033[0m"
          read -e -p "Number: " DPI_NUM
          if [ -z $DPI_NUM ]; then
            echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
            exit
            elif [ $DPI_NUM -eq 1 ]; then
            DPI="96"
            elif [ $DPI_NUM -eq 2 ]; then
            DPI="300"
            elif [ $DPI_NUM -eq 3 ]; then
            DPI="600"
            else
            echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
            exit
          fi
      fi
      echo -e ""
      read -e -p "Folder Output: " -i "$MARKETNAME" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      #convert to png and pdf default (pngtree)
      for id in $(inkscape -S $OPTIM_SOURCE | grep $IDPATTERN | cut -d "," -f 1)
      do
        # for market < 8 with export image preview
        if [ $MARKET -le 8 ]; then
        mkdir -p "$DIRECTORY/$CACHE/$id"
          inkscape \
          --export-id=$id \
          --batch-process \
          --export-id-only \
          --export-type=png \
          --export-text-to-path \
          --export-ignore-filters \
          --export-dpi=$DPI \
          --export-filename="$DIRECTORY/$CACHE/$id/$id.png" \
          $OPTIM_SOURCE >/dev/null 2>&1
          inkscape \
          --export-id=$id \
          --batch-process \
          --export-id-only \
          --export-type=eps \
          --export-text-to-path \
          --export-ignore-filters \
          --export-filename="$DIRECTORY/$CACHE/$id/$id.eps" \
          $OPTIM_SOURCE >/dev/null 2>&1
        # for shuttestock
          elif [ $MARKET -eq 9 ]; then
            to_eps
        # for flaticon
          elif [ $MARKET -eq 10 ]; then
            to_svg
          else
          exit
        fi
      done
      # export image preview
      cd "$DIRECTORY"/$CACHE
      if [ $MARKET -le 8 ]; then
        # if eps+jpg (freepik)
        if [ $MARKET -eq 2 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///'); do
            convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        # if eps+jpg (adobe stock)
        elif [ $MARKET -eq 3 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///'); do
            convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        # if eps.zip and jpg (vectorstock)
        elif [ $MARKET -eq 4 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///'); do
            convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        # lovepik keep eps and png for graphich
        elif [ $MARKET -eq 5 ]; then
          echo -e "" >/dev/null 2>&1
        # if eps and jpg (veectezy)
        elif [ $MARKET -eq 6 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///');
            do convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        # if eps and jpg (dreamstime)
        elif [ $MARKET -eq 7 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///');
            do convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        # if eps and jpg (istock)
        elif [ $MARKET -eq 8 ]; then
          for i in $(find -name "*.png" | sed 's/\.\///');
            do convert "$i"  \
              -depth 8 \
              -flatten \
              -quality 100 \
              -colorspace sRGB \
              "${i%.*}.jpg";
          done
        fi
      # (shuttestock)
      elif [ $MARKET -eq 9 ]; then
        echo -e "" >/dev/null 2>&1
      # (flaticon)
      elif [ $MARKET -eq 10 ]; then
        echo -e "" >/dev/null 2>&1
      fi
      # move to directory
      if [ $MARKET -le 8 ]; then
        if [ $MARKET -eq 1 ]; then
          for dir in $(ls | cut -f 1)
            do
            cd $dir
            zip ../../$dir.zip *.eps *.png >/dev/null 2>&1
            cd ..
          done
        elif [ $MARKET -eq 2 ]; then
          for dir in $(ls | cut -f 1)
            do
            cd $dir
            zip ../../$dir.zip *.eps *.jpg >/dev/null 2>&1
            cd ..
          done
        elif [ $MARKET -eq 3 ]; then
          for dir in $(ls | cut -f 1)
            do
            cd $dir
            zip ../../$dir.zip *.eps *.jpg >/dev/null 2>&1
            cd ..
          done
        elif [ $MARKET -eq 4 ]; then
          for dir in $(ls | cut -f 1)
            do
            cd $dir
            zip ../../$dir.zip *.eps >/dev/null 2>&1
            cd ..
          done
          for i in $(find -name "*.jpg" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
        elif [ $MARKET -eq 5 ]; then
          for dir in $(ls | cut -f 1)
            do
            cd $dir
            zip ../../$dir.zip *.eps >/dev/null 2>&1
            cd ..
          done
          for i in $(find -name "*.png" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
        elif [ $MARKET -eq 6 ]; then
          for i in $(find -name "*.eps" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
          for i in $(find -name "*.jpg" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
        elif [ $MARKET -eq 7 ]; then
          for i in $(find -name "*.eps" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
          for i in $(find -name "*.jpg" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
        elif [ $MARKET -eq 8 ]; then
          for i in $(find -name "*.eps" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
          for i in $(find -name "*.jpg" | sed 's/\.\///');
            do mv  $i .. >/dev/null 2>&1
          done
        fi
      elif [ $MARKET -eq 9 ]; then
        for i in $(find -name "*.eps" | sed 's/\.\///');
          do mv  $i .. >/dev/null 2>&1
        done
      elif [ $MARKET -eq 10 ]; then
        for i in $(find -name "*.svg" | sed 's/\.\///');
          do mv  $i .. >/dev/null 2>&1
        done
      fi
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Png")
      check_id
      echo -e "Export to: \033[1;36mPNG\033[0m"
      echo -e ""
      echo -e "DPI:"
      echo -e "  \033[1;33m[1] 72\033[0m"
      echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[3] 300\033[0m"
      echo -e "  \033[1;33m[4] 600\033[0m"
      read -e -p "Number: " DPI_NUM
      if [ -z $DPI_NUM ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
        exit
        elif [ $DPI_NUM -eq 1 ]; then
        DPI="72"
        elif [ $DPI_NUM -eq 2 ]; then
        DPI="96"
        elif [ $DPI_NUM -eq 3 ]; then
        DPI="300"
        elif [ $DPI_NUM -eq 4 ]; then
        DPI="600"
        else
        echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
        exit
      fi
      echo -e "Depth:"
      echo -e "  \033[1;33m[1] 8-bit\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] 16-bit\033[0m"
      read -e -p "Number: " DEPTH
      if [ -z $DEPTH ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Depth is empty."
        exit
        elif [ $DEPTH -eq 1 ]; then
        DEPTH="8"
        elif [ $DEPTH -eq 2 ]; then
        DEPTH="16"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$DEPTH-bit" is not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Png" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      to_png
      cd "$DIRECTORY"/$CACHE
      for i in *.png;
        do mv "$i" "../${i%.*}-$DEPTH-bit-$DPI-dpi.png"
      done
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
   "Jpg")
      echo -e "Export to: \033[1;36mJPG\033[0m"
      echo -e ""
      echo -e "DPI:"
      echo -e "  \033[1;33m[1] 72\033[0m"
      echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[3] 300\033[0m"
      echo -e "  \033[1;33m[4] 600\033[0m"
      read -e -p "Number: " DPI_NUM
      if [ -z $DPI_NUM ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
        exit
        elif [ $DPI_NUM -eq 1 ]; then
        DPI="72"
        elif [ $DPI_NUM -eq 2 ]; then
        DPI="96"
        elif [ $DPI_NUM -eq 3 ]; then
        DPI="300"
        elif [ $DPI_NUM -eq 4 ]; then
        DPI="600"
        else
        echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
        exit
      fi
      echo -e "Color Profile:"
      echo -e "  \033[1;33m[1] RGB > Default\033[0m \t(sRGB)"
      echo -e "  \033[1;33m[2] CMYK > Krita\033[0m \t(Chemical proof)"
      echo -e "  \033[1;33m[3] CMYK > Generic\033[0m \t(SWOP2006 Coated3v2)"
      echo -e "  \033[1;33m[4] CMYK > Corel\033[0m \t(Japan Color 2001 Coated)"
      echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m \t(U.S. Web Coated (SWOP) v2)"
      read -e -p "Number Profile: " ICC
      if [ -z $ICC ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Color profile is empty."
        elif [ $ICC -eq 1 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 2 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 3 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 4 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 5 ]; then
        echo -e "" >/dev/null 2>&1
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$ICC" is not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Jpg" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      echo -e "Background:"
      echo -e "  \033[1;33m[1]\033[0m White"
      echo -e "  \033[1;33m[2]\033[0m Black"
      read -e -p "Background: " -i "1" BGCOLOR
      if [ -z $BGCOLOR ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Background color is empty."
        elif [ $BGCOLOR -eq 1 ]; then
        BGCOLOR="white"
        elif [ $BGCOLOR -eq 2 ]; then
        BGCOLOR="black"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$BGCOLOR" is not support."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      to_png
      cd "$DIRECTORY"/$CACHE
      if [ $ICC -eq 1 ]; then
        PROFILENAME="srgb"
        for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace sRGB \
            -background $BGCOLOR \
            -profile $SRGB \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
        done
        elif [ $ICC -eq 2 ]; then
          PROFILENAME="cmyk-krita"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $CHEMICAL_PROOF \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
          done
        elif [ $ICC -eq 3 ]; then
          PROFILENAME="cmyk-generic"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $SWOP2006_COATED3V2 \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
          done
        elif [ $ICC -eq 4 ]; then
          PROFILENAME="cmyk-corel"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $JAPANCOLOR2001COATED \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
          done
        elif [ $ICC -eq 5 ]; then
          PROFILENAME="cmyk-adobe"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $USWEBCOATEDSWOP \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.jpg";
          done
        else
          echo -e "\033[1;91m[FAILED]\033[0m Color Profile is not support."
        fi
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Tif")
      echo -e "Export to: \033[1;36mTIF\033[0m"
      echo -e ""
      echo -e "DPI:"
      echo -e "  \033[1;33m[1] 72\033[0m"
      echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[3] 300\033[0m"
      echo -e "  \033[1;33m[4] 600\033[0m"
      read -e -p "Number: " DPI_NUM
      if [ -z $DPI_NUM ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
        exit
        elif [ $DPI_NUM -eq 1 ]; then
        DPI="72"
        elif [ $DPI_NUM -eq 2 ]; then
        DPI="96"
        elif [ $DPI_NUM -eq 3 ]; then
        DPI="300"
        elif [ $DPI_NUM -eq 4 ]; then
        DPI="600"
        else
        echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
        exit
      fi
      echo -e "Depth:"
      echo -e "  \033[1;33m[1] 8-bit\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] 16-bit\033[0m"
      read -e -p "Number: " DEPTH
      if [ -z $DEPTH ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Depth is empty."
        exit
        elif [ $DEPTH -eq 1 ]; then
        DEPTH="8"
        elif [ $DEPTH -eq 2 ]; then
        DEPTH="16"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$DEPTH-bit" is not support."
        exit
      fi
      echo -e "Color Profile:"
      echo -e "  \033[1;33m[1] RGB > Default\033[0m \t(sRGB)"
      echo -e "  \033[1;33m[2] CMYK > Krita\033[0m \t(Chemical proof)"
      echo -e "  \033[1;33m[3] CMYK > Generic\033[0m \t(SWOP2006 Coated3v2)"
      echo -e "  \033[1;33m[4] CMYK > Corel\033[0m \t(Japan Color 2001 Coated)"
      echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m \t(U.S. Web Coated (SWOP) v2)"
      read -e -p "Number Profile: " ICC
      if [ -z $ICC ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Color profile is empty."
        elif [ $ICC -eq 1 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 2 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 3 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 4 ]; then
        echo -e "" >/dev/null 2>&1
        elif [ $ICC -eq 5 ]; then
        echo -e "" >/dev/null 2>&1
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$ICC" is not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Tif" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      echo -e "Background:"
      echo -e "  \033[1;33m[1]\033[0m White"
      echo -e "  \033[1;33m[2]\033[0m Black"
      read -e -p "Background: " -i "1" BGCOLOR
      if [ -z $BGCOLOR ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Background color is empty."
        elif [ $BGCOLOR -eq 1 ]; then
        BGCOLOR="white"
        elif [ $BGCOLOR -eq 2 ]; then
        BGCOLOR="black"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$BGCOLOR" is not support."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      to_png
      cd "$DIRECTORY"/$CACHE
      if [ $ICC -eq 1 ]; then
        PROFILENAME="srgb"
        for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace sRGB \
            -background $BGCOLOR \
            -profile $SRGB \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
        done
        elif [ $ICC -eq 2 ]; then
          PROFILENAME="cmyk-krita"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $CHEMICAL_PROOF \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
          done
        elif [ $ICC -eq 3 ]; then
          PROFILENAME="cmyk-generic"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $SWOP2006_COATED3V2 \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
          done
        elif [ $ICC -eq 4 ]; then
          PROFILENAME="cmyk-corel"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $JAPANCOLOR2001COATED \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
          done
        elif [ $ICC -eq 5 ]; then
          PROFILENAME="cmyk-adobe"
          for i in *.png; do
          convert "$i"  \
            -depth 8 \
            -flatten \
            -quality 100 \
            -colorspace CMYK \
            -background $BGCOLOR \
            -profile $USWEBCOATEDSWOP \
            "../${i%.*}-$PROFILENAME-$DPI-dpi.tif";
          done
        else
          echo -e "\033[1;91m[FAILED]\033[0m Color Profile is not support."
        fi
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Pdf")
      echo -e "Export to: \033[1;36mPDF\033[0m"
      echo -e ""
      echo -e "Output"
      echo -e "  \033[1;33m[1] Vector\033[0m \t\t(RGB/CMYK)"
      echo -e "  \033[1;33m[2] Raster\033[0m \t\t(CMYK Only. Support Color Profile)"
      read -e -p "Number: " output
      if [ -z $output ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Output file is empty."
        elif [ $output -eq 1 ]; then
        echo -e "Colorspace"
        echo -e "  \033[1;33m[1] RGB\033[0m \t\t(recommended)"
        echo -e "  \033[1;33m[2] CMYK\033[0m"
        read -e -p "Number: " COLOR
        if [ $COLOR -gt 2 ]; then
          echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
          exit
        fi
        elif [ $output -eq 2 ]; then
          echo -e "DPI:"
          echo -e "  \033[1;33m[1] 72\033[0m"
          echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
          echo -e "  \033[1;33m[3] 300\033[0m"
          echo -e "  \033[1;33m[4] 600\033[0m"
          read -e -p "Number: " DPI_NUM
          if [ -z $DPI_NUM ]; then
            echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
            exit
            elif [ $DPI_NUM -eq 1 ]; then
            DPI="72"
            elif [ $DPI_NUM -eq 2 ]; then
            DPI="96"
            elif [ $DPI_NUM -eq 3 ]; then
            DPI="300"
            elif [ $DPI_NUM -eq 4 ]; then
            DPI="600"
            else
            echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
            exit
          fi
          echo -e "Color Profile:"
          echo -e "  \033[1;33m[1] RGB > Default\033[0m \t(sRGB)"
          echo -e "  \033[1;33m[2] CMYK > Krita\033[0m \t(Chemical proof)"
          echo -e "  \033[1;33m[3] CMYK > Generic\033[0m \t(SWOP2006 Coated3v2)"
          echo -e "  \033[1;33m[4] CMYK > Corel\033[0m \t(Japan Color 2001 Coated)"
          echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m \t(U.S. Web Coated (SWOP) v2)"
          read -e -p "Number Profile: " ICC
          if [ -z $ICC ]; then
            echo -e "\033[1;91m[FAILED]\033[0m Color profile is empty."
            elif [ $ICC -eq 1 ]; then
            echo -e "" >/dev/null 2>&1
            elif [ $ICC -eq 2 ]; then
            echo -e "" >/dev/null 2>&1
            elif [ $ICC -eq 3 ]; then
            echo -e "" >/dev/null 2>&1
            elif [ $ICC -eq 4 ]; then
            echo -e "" >/dev/null 2>&1
            elif [ $ICC -eq 5 ]; then
            echo -e "" >/dev/null 2>&1
            else
            echo -e "\033[1;91m[FAILED]\033[0m "$ICC" is not support."
            exit
          fi
      else
        echo -e "\033[1;91m[FAILED]\033[0m "$output" is not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Pdf" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      read -e -p "Merge PDF (y/N): " MERGE
        if [[ $MERGE =~ ^[Yy]$ ]]; then
          echo -e "Merge PDF: \033[1;33mYes\033[0m"
          else
          echo -e "Merge PDF: \033[1;33mNo\033[0m"
          MERGE="n"
        fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      #convert vector
      if [ $output -eq 1 ]; then
        to_svg
        cd "$DIRECTORY"/$CACHE
        if [ $COLOR -eq 1 ]; then
          PROFILENAME="srgb"
          for i in *.svg;
          do cat "$i" | inkscape --pipe -C \
          -o "${i%.*}-vector-$PROFILENAME.pdf" \
            >/dev/null 2>&1
          done
          # merge
          if [ $MERGE == 'y' ]; then
            mkdir -p merge
            mv *-vector-$PROFILENAME.pdf merge/
            gs -q -dBATCH -dNOPAUSE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../$DIRECTORY-merge-vector-$PROFILENAME.pdf \
              merge/*.pdf;
          else
            mv *-vector-$PROFILENAME.pdf ../
          fi
          elif [ $COLOR -eq 2 ]; then
            PROFILENAME="cmyk"
            for i in *.svg;
          do cat "$i" | inkscape --pipe -C \
          -o "${i%.*}.pdf" \
          >/dev/null 2>&1
          done
          rm *.svg
          DEVICE="pdfwrite"
          for i in *.pdf;
          do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
            -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK \
            -sOutputFile="${i%.*}-vector-$PROFILENAME.pdf" "$i"
          done
          # merge
          if [ $MERGE == 'y' ]; then
            mkdir -p merge
            mv *-vector-$PROFILENAME.pdf merge/
            gs -q -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \
            -sOutputFile=../$DIRECTORY-merge-vector-$PROFILENAME.pdf \
            merge/*.pdf;
          else
            mv *-vector-$PROFILENAME.pdf ../
          fi
        else
          echo -e "\033[1;91m[FAILED]\033[0m Can not convert."
          exit
        fi
      # convert raster
      elif [ $output -eq 2 ]; then
        if [ $ICC -eq 1 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="srgb"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace sRGB \
                -profile $SRGB \
                "${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
              *.pdf;
            cd ..
          else
            PROFILENAME="srgb"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
                -quality 100 \
                -colorspace sRGB \
                -depth 8 \
                -profile $SRGB \
                "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        elif [ $ICC -eq 2 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="cmyk-krita"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $CHEMICAL_PROOF \
                "../${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
          *.pdf;
            cd ..
          else
            PROFILENAME="cmyk-krita"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
              -depth 8 \
              -quality 100 \
              -colorspace CMYK \
              -profile $CHEMICAL_PROOF \
              "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        elif [ $ICC -eq 3 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="cmyk-generic"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
              -depth 8 \
              -quality 100 \
              -colorspace CMYK \
              -profile $SWOP2006_COATED3V2 \
              "${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
          *.pdf;
            cd ..
          else
            PROFILENAME="cmyk-generic"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $SWOP2006_COATED3V2 \
                "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        elif [ $ICC -eq 4 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="cmyk-corel"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $JAPANCOLOR2001COATED \
                "${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
              *.pdf;
            cd ..
          else
            PROFILENAME="cmyk-corel"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $JAPANCOLOR2001COATED \
                "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        elif [ $ICC -eq 5 ]; then
          if [ $MERGE == 'y' ]; then
            PROFILENAME="cmyk-adobe"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
                -depth 8 \
                -quality 100 \
                -colorspace CMYK \
                -profile $USWEBCOATEDSWOP \
                "${i%.*}-raster.pdf";
            done
            mkdir -p merge
            mv *.pdf merge
            cd merge
            # convert merge
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE \
              -sDEVICE=pdfwrite \
              -sOutputFile=../../$DIRECTORY-merge-raster-$PROFILENAME-$DPI-dpi.pdf \
              *.pdf;
            cd ..
          else
            PROFILENAME="cmyk-adobe"
            to_png
            cd "$DIRECTORY"/$CACHE
            for i in *.png; do
              convert "$i" \
                -quality 100 \
                -colorspace CMYK \
                -depth 8 \
                -profile $USWEBCOATEDSWOP \
                "../${i%.*}-raster-$PROFILENAME-$DPI-dpi.pdf";
            done
          fi
        else
          echo -e "\033[1;91m[FAILED]\033[0m Color Profile is not support."
          exit
        fi
      else
        echo -e "\033[1;91m[FAILED]\033[0m Can not convert."
        exit
      fi
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Svg")
      echo -e "Export to: \033[1;36mSVG\033[0m"
      echo -e ""
      read -e -p "Folder Output: " -i "Svg" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      to_svg
      cd "$DIRECTORY"/$CACHE
      mv *.svg ..
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Eps")
      echo -e "Export to: \033[1;36mEPS\033[0m"
      echo -e ""
      eps_validator
      echo -e ""
      read -e -p "Folder Output: " -i "Eps" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      to_eps
      cd "$DIRECTORY"/$CACHE
      PROFILENAME="srgb"
      for i in *.eps;
        do mv "$i" "../${i%.*}-$PROFILENAME.eps"
      done
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Ai")
      echo -e "Export to: \033[1;36mAI\033[0m"
      echo -e ""
      echo -e "Colorspace:"
      echo -e "  \033[1;33m[1] RGB\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] CMYK\033[0m"
      read -e -p "Number: " COLOR
      if [ $COLOR -gt 2 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
        exit
        elif [ $COLOR -lt 1 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Ai" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      to_pdf
      cd "$DIRECTORY"/$CACHE
      #srgb
      if [ $COLOR -eq 1 ]; then
        PROFILENAME="srgb"
        DEVICE="pdfwrite"
        for i in *.pdf;
          do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
            -sOutputFile="../${i%.*}-$PROFILENAME.ai" "$i"
        done
        #cmyk
        elif [ $COLOR -eq 2 ]; then
          PROFILENAME="cmyk"
          DEVICE="pdfwrite"
          for i in *.pdf;
            do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
              -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK \
              -sOutputFile="../${i%.*}-$PROFILENAME.ai" "$i"
          done
      fi
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Psd")
      echo -e "Export to: \033[1;36mPSD\033[0m"
      echo -e ""
      echo -e "Depth:"
      echo -e "  \033[1;33m[1] 8-bit\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] 16-bit\033[0m"
      read -e -p "Number: " DEPTH
      if [ -z $DEPTH ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Depth is empty."
        exit
        elif [ $DEPTH -eq 1 ]; then
        DEPTH="8"
        elif [ $DEPTH -eq 2 ]; then
        DEPTH="16"
        else
        echo -e "\033[1;91m[FAILED]\033[0m "$DEPTH-bit" is not support."
        exit
      fi
      echo -e "Colorspace:"
      echo -e "  \033[1;33m[1] RGB\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[2] CMYK\033[0m"
      read -e -p "Number: " COLOR
      if [ $COLOR -gt 2 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
        exit
        elif [ $COLOR -lt 1 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m $COLOR not support."
        exit
      fi
      read -e -p "Folder Output: " -i "Psd" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      to_pdf
      cd "$DIRECTORY"/$CACHE
      #srgb
      if [ $COLOR -eq 1 ]; then
        PROFILENAME="srgb"
        if [ $DEPTH -eq 16 ]; then
        DEVICE=psdrgb16
        else
        DEVICE=psdrgb
        fi
        for i in *.pdf;
          do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
            -sOutputFile="../${i%.*}-$PROFILENAME-$DEPTH-bit.psd" "$i"
        done
        #cmyk
        elif [ $COLOR -eq 2 ]; then
          PROFILENAME="cmyk"
          if [ $DEPTH -eq 16 ]; then
          DEVICE=psdcmyk16
          else
          DEVICE=psdcmyk
          fi
          for i in *.pdf;
            do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$DEVICE \
              -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK \
              -sOutputFile="../${i%.*}-$PROFILENAME-$DEPTH-bit.psd" "$i"
          done
      fi
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Webp")
      echo -e "Export to: \033[1;36mWEBP\033[0m"
      echo -e ""
      echo -e "DPI:"
      echo -e "  \033[1;33m[1] 72\033[0m"
      echo -e "  \033[1;33m[2] 96\033[0m \t\t(recommended)"
      echo -e "  \033[1;33m[3] 300\033[0m"
      echo -e "  \033[1;33m[4] 600\033[0m"
      read -e -p "Number: " DPI_NUM
      if [ -z $DPI_NUM ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Dpi is empty."
        exit
        elif [ $DPI_NUM -eq 1 ]; then
        DPI="72"
        elif [ $DPI_NUM -eq 2 ]; then
        DPI="96"
        elif [ $DPI_NUM -eq 3 ]; then
        DPI="300"
        elif [ $DPI_NUM -eq 4 ]; then
        DPI="600"
        else
        echo -e "\033[1;91m[FAILED]\033[0m $DPI dpi not recommended."
        exit
      fi
      read -e -p "Folder Output: " -i "Webp" DIRECTORY
      if [ -z "$DIRECTORY" ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Folder output is empty."
        exit
      fi
      loading
      mkdir -p "$DIRECTORY/$CACHE"
      optimized_svg
      for id in $(inkscape -S $OPTIM_SOURCE | grep $IDPATTERN | cut -d "," -f 1); do
        inkscape -j -i $id -o "$DIRECTORY/$CACHE/$id.png" \
        $OPTIM_SOURCE -d $DPI >/dev/null 2>&1
      done
      cd "$DIRECTORY"/$CACHE
      for i in *.png; do
        cwebp -quiet "$i" -o "../${i%.*}-$DPI-dpi.webp";
      done
      cd .. && rm -r $CACHE
      cd ..
      rm_optimized_svg
      finish
      break
      ;;
    "Cancel")
      clear
      echo -e "\033[1;33mEXIT!.\033[0m"
      rm_optimized_svg; exit;
      ;;
    *) echo -e "\033[1;91m[FAILED]\033[0m" $REPLY. Try again.;;
  esac
done;
