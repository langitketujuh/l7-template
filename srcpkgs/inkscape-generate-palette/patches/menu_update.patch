diff --git a/generate_palette.inx b/generate_palette.inx
index 765e463..99e3dda 100644
--- a/generate_palette.inx
+++ b/generate_palette.inx
@@ -21,9 +21,9 @@
   <param name="default" type="bool" gui-text="Include default grays">false</param>
   <param name="replace" type="bool" gui-text="Replace existing palette">false</param>
   <param name="sort" type="optiongroup" appearance="combo" gui-text="Sort colors">
-      <option value="selection">Selection / Z-index</option>
       <option value="hsl">By HSL values</option>
       <option value="rgb">By RGB values</option>
+      <option value="selection">Selection / Z-index</option>
       <option value="x_location">X Location</option>
       <option value="y_location">Y Location</option>
   </param>
@@ -31,7 +31,6 @@
   <spacer />
 
   <hbox>
-    <image>info.svg</image>
     <label>Don't forget to restart Inkscape</label>
   </hbox>
 
diff --git a/generate_palette.py b/generate_palette.py
index be09fbb..adb4720 100644
--- a/generate_palette.py
+++ b/generate_palette.py
@@ -100,33 +100,37 @@ class GeneratePalette(inkex.Effect):
   def get_node_index(self, item):
     node = item[1]
     id = node.attrib.get('id')
-
     return self.options.ids.index(id)
 
-  def get_node_x(self, item):
-    node = item[1]
-    return node.bounding_box().center_x
+  def get_node_yx(self, item):
+    node_bbox = item[1].bounding_box()
+    x = node_bbox.center_x - self.selected_bbox.left
+    return [ self.round_to(x, node_bbox.width), node_bbox.center_y ]
 
-  def get_node_y(self, item):
-    node = item[1]
-    return node.bounding_box().center_y
-  
+  def get_node_xy(self, item):
+    node_bbox = item[1].bounding_box()
+    y = node_bbox.center_y - self.selected_bbox.top
+    return [ self.round_to(y, node_bbox.height), node_bbox.center_x ]
+
+  @staticmethod
+  def round_to(val, unit):
+    return val - (val % unit)
 
 
 
   def get_formatted_color(self, color):
     rgb = inkex.Color(color).to_rgb()
-    
+
     if self.options.sort == 'hsl':
       key = inkex.Color(color).to_hsl()
       key = "{:03d}{:03d}{:03d}".format(*key)
     else:      
       key = "{:03d}{:03d}{:03d}".format(*rgb)
-            
+
     rgb = "{:3d} {:3d} {:3d}".format(*rgb)
     color = str(color).upper()
     name = str(inkex.Color(color).to_named()).upper()
-    
+
     if name != color:
       name = "%s (%s)" % (name.capitalize(), color)
 
@@ -136,17 +140,21 @@ class GeneratePalette(inkex.Effect):
 
   def get_selected_colors(self):
     colors   = []
+
     selected = list(self.svg.selected.items())
 
-    if self.options.sort == 'y_location':
-      selected.sort(key=self.get_node_x)
-      selected.sort(key=self.get_node_y)
-    elif self.options.sort == 'x_location':
-      selected.sort(key=self.get_node_y)
-      selected.sort(key=self.get_node_x)
-    else:
+    if self.options.sort == 'selection':
       selected.sort(key=self.get_node_index)
 
+    elif self.options.sort == 'xy_location':
+      self.selected_bbox = self.svg.selection.bounding_box()
+      selected.sort(key=self.get_node_xy)
+
+    elif self.options.sort == 'yx_location':
+      self.selected_bbox = self.svg.selection.bounding_box()
+      selected.sort(key=self.get_node_yx)
+
+
     for id, node in selected:
       if self.options.property in ['fill', 'both']:
         fill = self.get_node_prop(node, 'fill')
